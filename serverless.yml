service: workshop-${self:custom.name}

frameworkVersion: "3"

custom:
  name: jasper
  export-env:
    overwrite: true
  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.env.cfnoutputs
  apiGatewayThrottling:
    maxRequestsPerSecond: 100
    maxConcurrentRequests: 50

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  endpointType: regional
  environment:
    rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}
    serviceName: ${self:service}
    stage: ${sls:stage}
    middy_cache_enabled: true
    middy_cache_expiry_milliseconds: 60000 # 1 mins
    ssmStage: ${param:ssmStage, sls:stage}
  apiGateway:
    metrics: true

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
          throttling:
            maxRequestsPerSecond: 200
            maxConcurrentRequests: 100
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      orders_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/orders
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/get-restaurants/config

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/*
      - Effect: Allow
        Action: kms:Decrypt
        Resource: ${ssm:/${self:service}/${param:ssmStage, sls:stage}/kmsArn}

  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
      idempotency_table: !Ref IdempotencyTable
    destinations:
      onFailure:
        type: sqs
        arn: !GetAtt OnFailureQueue.Arn
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref RestaurantNotificationTopic
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: !GetAtt IdempotencyTable.Arn
      - Effect: Allow
        Action: sqs:SendMessage
        Resource: !GetAtt OnFailureQueue.Arn

resources:
  Conditions:
    IsE2eTest:
      Fn::StartsWith:
        - ${sls:stage}
        - dev

  Resources:
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Sub ${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com
              OriginPath: /${sls:stage}
              Id: BigMouthOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: BigMouthOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: b2884449-e4de-46a7-ac36-70bc7f1ddd6d # Managed-CachingOptimizedForUncompressedObjects
            OriginRequestPolicyId: 59781a5b-3903-41f3-afcb-af62929ccde1 # Managed-CORS-CustomOrigin

    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"

    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${sls:stage}/serviceUrl
        Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}

    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${sls:stage}_${self:custom.name}

    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic

    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1

    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn

    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic

    E2eTestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2eTest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: ["big-mouth"]
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2eTestQueue.Arn
            Id: e2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: "$.source"
                detailType: "$.detail-type"
                detail: "$.detail"
              InputTemplate: !Sub >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "${EventBus}"
                }

    IdempotencyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: expiration

    OnFailureQueue:
      Type: AWS::SQS::Queue

    AlarmTopic:
      Type: AWS::SNS::Topic

    AlarmTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: jasper.d.gabriel+workshop@gmail.com
        Protocol: email
        TopicArn: !Ref AlarmTopic

    OnFailureQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "[${sls:stage}] [NotifyRestaurant function] Failed events detected in OnFailure destination"
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OnFailureQueue.QueueName
        AlarmActions:
          - !Ref AlarmTopic

    DestinationDeliveryFailuresAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "[${sls:stage}] [NotifyRestaurant function] Failed to deliver failed events to OnFailure destination"
        MetricName: DestinationDeliveryFailures
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: FunctionName
            Value: !Ref NotifyDashrestaurantLambdaFunction
        AlarmActions:
          - !Ref AlarmTopic

  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus

    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic

    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue

plugins:
  - serverless-export-env
  - serverless-export-outputs
  - serverless-plugin-extrinsic-functions
  - serverless-iam-roles-per-function
  - serverless-api-gateway-throttling
